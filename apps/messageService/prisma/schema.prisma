// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  firstname        String?
  lastname         String?
  alias            String?
  email            String
  password         String
  offset           Int
  sentMessages     Message[]      @relation("sentMessage")
  receivedMessages Message[]      @relation("receivedMessage")
  lastActiveAt     Int
  connection       User?          @relation("Connections", fields: [connectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  connectionId     String?        @db.ObjectId
  connections      User[]         @relation("Connections")
  groupMemberships GroupMember[] // Group memberships
  groupMessages    GroupMessage[]
}

model Message {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String @db.ObjectId
  recieverId String @db.ObjectId
  text       String
  timestamp  Int
  sender     User   @relation("sentMessage", fields: [senderId], references: [id])
  receiver   User   @relation("receivedMessage", fields: [recieverId], references: [id])
}

model GroupMessage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  senderId  String @db.ObjectId
  groupId   String @db.ObjectId
  text      String
  timestamp Int
  sender    User   @relation(fields: [senderId], references: [id])
  group     Group  @relation(fields: [groupId], references: [id])
}

model Group {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  members  GroupMember[]
  messages GroupMessage[]
}

model GroupMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}
